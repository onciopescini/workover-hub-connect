/**
 * Console Cleanup Report Generator
 * 
 * Generates markdown and JSON reports for console cleanup scanning.
 */

import type { ScanResult } from './scanner.js';

export function generateMarkdownReport(scanResult: ScanResult): string {
  const { totalConsoleUsages, usagesByType, productionRiskFiles, totalFiles } = scanResult;
  
  const report = `
# 🧹 Console Cleanup Report
Generated: ${new Date().toISOString()}

## 🚨 Critical Issues
- **${totalConsoleUsages} console statements** found across ${Object.keys(scanResult.usagesByFile).length} files
- **${productionRiskFiles.length} production risk files** with console usage
- **${totalFiles} total files** scanned

## 📊 Console Usage by Type
${Object.entries(usagesByType)
  .map(([type, count]) => `- **console.${type}**: ${count} occurrences`)
  .join('\n')}

## 🔥 High Priority Files (Production Risk)
${productionRiskFiles.length > 0 
  ? productionRiskFiles.map(file => `- \`${file}\``).join('\n')
  : '✅ No production risk files found!'
}

## 📁 Detailed Breakdown
${Object.entries(scanResult.usagesByFile)
  .map(([file, usages]) => `
### ${file} (${usages.length} issues)
${usages.map(usage => `- Line ${usage.line}: \`${usage.content}\``).join('\n')}
  `).join('\n')}

## 🎯 Next Steps
1. Run \`npm run console-cleanup --fix\` to see automated replacement suggestions
2. Manual review of component-specific console usage
3. Implement pre-commit hooks to prevent new console usage
4. Verify 0 console output in production build

## 🏃‍♂️ CLI Usage
\`\`\`bash
# Basic scan
npm run console-cleanup

# Generate this report as file
npm run console-cleanup -- --output cleanup-report.md

# Show fix suggestions
npm run console-cleanup -- --fix

# CI/CD integration (fails if production console logs found)
npm run console-cleanup -- --fail-on-production
\`\`\`

---
*Generated by WorkoverHub Console Cleanup CLI*
  `.trim();

  return report;
}

export function generateJsonReport(scanResult: ScanResult): string {
  const jsonReport = {
    timestamp: new Date().toISOString(),
    summary: {
      totalFiles: scanResult.totalFiles,
      totalConsoleUsages: scanResult.totalConsoleUsages,
      productionRiskFiles: scanResult.productionRiskFiles.length,
      hasProductionRisk: scanResult.productionRiskFiles.length > 0,
    },
    usagesByType: scanResult.usagesByType,
    productionRiskFiles: scanResult.productionRiskFiles,
    detailedFindings: scanResult.usagesByFile,
    recommendations: [
      'Replace console statements with centralized logger',
      'Add pre-commit hooks to prevent new console usage',
      'Verify 0 console output in production build',
    ],
  };

  return JSON.stringify(jsonReport, null, 2);
}